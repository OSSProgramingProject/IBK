# -*- coding: utf-8 -*-
"""ossproject_API호출 코드 및 Flask와 html 템플릿.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JRP39_08fdn0DnTxOEW-uAYQj5H1wj4

# **채용 코드**
"""

import requests

# Codeforces 문제 API 호출
url = "https://codeforces.com/api/problemset.problems"
response = requests.get(url)  # GET 요청 보내기
problems = response.json()["result"]["problems"]  # 응답 데이터를 JSON으로 변환

"""Codeforces API를 사용하여 **HTML 페이지에서 문제를 그대로 확인할 수 있게 하는 방법**은 **문제 정보를 API에서 받아온 후, 해당 문제의 상세 내용을 HTML로 출력하는 방식**으로 구현할 수 있습니다.

이 방법은 크게 두 가지 단계로 나눌 수 있습니다:
1. **Codeforces API를 사용해 문제 목록을 가져오기**
2. **HTML 페이지에서 문제 목록과 링크를 동적으로 표시하기**

### **1. Codeforces API로 문제 정보 가져오기**

API를 통해 문제 목록을 받아온 후, HTML에서 이를 출력하려면 먼저 Python 서버 (예: Flask나 Django)에서 데이터를 처리하고, 이를 HTML 템플릿에 전달해야 합니다.

---

### **2. Flask로 문제 정보 HTML 출력하기**

Flask는 Python 웹 프레임워크로, API에서 가져온 데이터를 HTML로 출력할 수 있게 도와줍니다. 여기서는 Flask를 사용하여 **Codeforces API에서 문제 목록을 받아오고**, 해당 문제를 HTML 페이지에서 확인할 수 있도록 할 것입니다.

#### **1. Flask 설치**
먼저 Flask를 설치합니다.

bash
```
pip install Flask
```

#### **2. Flask 애플리케이션 작성**

python
```
from flask import Flask, render_template
import requests

app = Flask(__name__)

@app.route('/')
def index():
    # Codeforces API 호출하여 문제 목록 가져오기
    url = "https://codeforces.com/api/problemset.problems"
    response = requests.get(url)
    problems = response.json()["result"]["problems"]

    # 문제 목록을 HTML로 표시하기 위해 템플릿에 전달
    return render_template('index.html', problems=problems)

if __name__ == '__main__':
    app.run(debug=True)
```

- **`render_template`**: Flask에서 HTML 템플릿을 렌더링할 때 사용하는 함수입니다. `index.html` 템플릿 파일에 문제 목록을 전달합니다.
- **API 호출**: `requests.get()`을 통해 Codeforces에서 문제 목록을 가져오고, `response.json()`을 사용하여 JSON 데이터를 파싱합니다.

#### **3. HTML 템플릿 작성 (index.html)**

Flask는 기본적으로 **Jinja2** 템플릿 엔진을 사용하여 Python 코드와 HTML을 결합할 수 있습니다. `index.html` 파일을 만들어서 문제 목록을 HTML 테이블로 표시합니다.

`templates/index.html` 파일을 다음과 같이 작성합니다:

html
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Codeforces Problems</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Codeforces Problems</h1>
    <table>
        <thead>
            <tr>
                <th>Problem Name</th>
                <th>Tags</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
            {% for problem in problems %}
                <tr>
                    <td>{{ problem['name'] }}</td>
                    <td>{{ problem['tags']|join(', ') }}</td>
                    <td><a href="https://codeforces.com/problemset/problem/{{ problem['contestId'] }}/{{ problem['index'] }}" target="_blank">View Problem</a></td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
```

#### **HTML 템플릿 설명**
- **`{% for problem in problems %}`**: `problems` 리스트의 각 문제에 대해 반복문을 돌며 HTML 테이블에 각 문제를 표시합니다.
- **`{{ problem['name'] }}`**: API로 받아온 문제의 이름을 출력합니다.
- **`{{ problem['tags']|join(', ') }}`**: 문제와 관련된 태그들을 콤마로 구분하여 출력합니다.
- **문제 링크**: `href` 속성에 문제의 URL을 삽입하여 클릭하면 문제 상세 페이지로 이동할 수 있게 합니다.

---

### **3. 실행하기**

1. **Flask 애플리케이션 실행**:
   - 위의 Python 코드를 `app.py`라는 파일로 저장한 후, 터미널에서 다음 명령어를 실행하여 서버를 실행합니다.

   bash
   ```
   python app.py
   ```

2. **웹 브라우저에서 확인**:
   - Flask 서버가 실행되면, 웹 브라우저에서 `http://127.0.0.1:5000/`에 접속하면 문제가 출력된 HTML 페이지를 확인할 수 있습니다.

---

### **결과 예시**

웹 페이지에서 다음과 같은 테이블 형식으로 문제 정보를 확인할 수 있습니다:

| Problem Name                       | Tags                  | Link                                |
|-------------------------------------|-----------------------|-------------------------------------|
| Codeforces Round #1360 (Div. 2) A  | Greedy, Sorting       | [View Problem](https://codeforces.com/problemset/problem/1360/A) |
| Codeforces Round #1360 (Div. 2) B  | Dynamic Programming   | [View Problem](https://codeforces.com/problemset/problem/1360/B) |
| ...                                 | ...                   | ...                                 |

각 문제 이름을 클릭하면 해당 문제의 상세 페이지로 이동할 수 있습니다.

---

### **추가 팁**
- **에러 처리**: API 호출에 실패했을 때, 사용자에게 적절한 메시지를 표시하는 등의 에러 처리 로직을 추가할 수 있습니다.
- **문제 정보 필터링**: 예를 들어, 특정 난이도나 태그를 기준으로 문제를 필터링하여 출력할 수 있습니다.

이 방법으로 **Codeforces 문제를 HTML에서 직접 확인할 수 있도록 구현**할 수 있습니다!
"""

import requests

# Codeforces 대회정보 API 호출
url = "https://codeforces.com/api/contest.list"
response = requests.get(url)  # GET 요청 보내기
data = response.json()  # 응답 데이터를 JSON으로 변환

"""Kaggle 대회 데이터를 **HTML 페이지에 표시하고 링크를 보여주는 방법**을 구현하려면, **K Flask**와 같은 웹 프레임워크를 사용하여 대회 데이터를 API를 통해 가져온 후, 이를 HTML로 출력하는 방법을 사용할 수 있습니다.

### 단계별로 구현하기

1. **Kaggle API를 통해 대회 데이터 가져오기**
2. **Flask 서버를 사용하여 데이터 처리 및 HTML 페이지 표시**
3. **HTML에서 데이터 표시하고 링크 연결**

### **1. Kaggle API로 대회 데이터 가져오기**

먼저, `kaggle` API를 사용하여 대회 데이터를 가져옵니다. 대회 데이터는 보통 `kaggle competitions list` 명령어로 확인할 수 있습니다.

#### **Python 코드로 대회 목록 가져오기**

python
```
from kaggle.api.kaggle_api_extended import KaggleApi

# Kaggle API 인증
api = KaggleApi()
api.authenticate()

# 대회 목록 가져오기
competitions = api.competitions_list()

# 대회 이름, 링크, 설명 가져오기
competition_data = []
for competition in competitions:
    competition_data.append({
        'name': competition.title,
        'url': f'https://www.kaggle.com/c/{competition.ref}',
        'description': competition.description
    })

# 대회 데이터 출력
print(competition_data)
```

이 코드는 `competitions_list()` 메서드를 사용해 Kaggle에 참여하고 있는 대회 목록을 가져오고, 각 대회에 대한 이름, URL, 설명을 추출하여 리스트로 저장합니다.

### **2. Flask 서버로 대회 데이터를 HTML로 출력**

Kaggle에서 가져온 대회 데이터를 **Flask 웹 서버**를 사용해 HTML 페이지에서 표시하도록 할 수 있습니다.

#### **Flask 애플리케이션 설정**

먼저 Flask를 설치합니다.

bash
```
pip install Flask
```

#### **Flask 애플리케이션 구현**

python
```
from flask import Flask, render_template
from kaggle.api.kaggle_api_extended import KaggleApi

app = Flask(__name__)

@app.route('/')
def index():
    # Kaggle API로 대회 목록 가져오기
    api = KaggleApi()
    api.authenticate()

    competitions = api.competitions_list()

    # 대회 데이터 저장
    competition_data = []
    for competition in competitions:
        competition_data.append({
            'name': competition.title,
            'url': f'https://www.kaggle.com/c/{competition.ref}',
            'description': competition.description
        })

    # 데이터를 HTML 템플릿에 전달
    return render_template('index.html', competitions=competition_data)

if __name__ == '__main__':
    app.run(debug=True)
```

- `api.competitions_list()`를 사용하여 대회 목록을 가져오고, 각 대회에 대한 데이터를 `competition_data` 리스트에 저장합니다.
- `render_template('index.html', competitions=competition_data)`를 사용하여 대회 데이터를 HTML 템플릿에 전달합니다.

### **3. HTML 템플릿 구현**

`templates/index.html` 파일을 작성하여 대회 목록을 표시하고, 각 대회의 링크를 클릭할 수 있게 합니다.

#### **HTML 코드 (`templates/index.html`)**

html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kaggle Competitions</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Kaggle Competitions</h1>
    <table>
        <thead>
            <tr>
                <th>Competition Name</th>
                <th>Description</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
            {% for competition in competitions %}
                <tr>
                    <td>{{ competition.name }}</td>
                    <td>{{ competition.description }}</td>
                    <td><a href="{{ competition.url }}" target="_blank">Go to Competition</a></td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
```

#### **HTML 템플릿 설명**
- **`{% for competition in competitions %}`**: Flask에서 Jinja2 템플릿을 사용하여 Python 변수(`competitions`)를 HTML에 삽입합니다. 이 반복문을 사용하여 모든 대회 정보를 테이블로 표시합니다.
- **`{{ competition.name }}`**: 대회의 이름을 출력합니다.
- **`{{ competition.description }}`**: 대회의 설명을 출력합니다.
- **`<a href="{{ competition.url }}" target="_blank">Go to Competition</a>`**: 대회의 URL을 링크로 만들어서 사용자가 클릭하면 해당 대회 페이지로 이동할 수 있게 합니다.

### **4. Flask 애플리케이션 실행**

1. **Python 파일 실행**: `app.py`라는 이름으로 Flask 애플리케이션을 저장한 후, 아래 명령어로 실행합니다.

bash
```
python app.py
```

2. **웹 브라우저에서 확인**: 서버가 실행되면, 웹 브라우저에서 `http://127.0.0.1:5000/` 주소를 열어 대회 목록과 링크를 확인할 수 있습니다.

---

### **결과 예시**

| Competition Name    | Description           | Link                                |
|---------------------|-----------------------|-------------------------------------|
| Titanic             | Predict survival on the Titanic | [Go to Competition](https://www.kaggle.com/c/titanic) |
| House Prices        | Predict house prices in Ames | [Go to Competition](https://www.kaggle.com/c/house-prices-advanced-regression-techniques) |
| ...                 | ...                   | ...                                 |

위와 같은 형식으로 대회 목록을 테이블로 표시하고, 각 대회의 상세 페이지로 연결되는 링크가 제공됩니다.

---

이 방법을 사용하면 **Kaggle 대회 데이터를 HTML 페이지에서 동적으로 표시하고, 각 대회에 대한 링크를 제공**할 수 있습니다!
"""